{"ast":null,"code":"var _jsxFileName = \"/Applications/robofriends-app/robofriends/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport './App.css';\n\nconst App = () => {\n  const [robots, setRobots] = useState();\n  const [searchfield, setSearchfield] = useState('');\n\n  const getRobots = () => {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => setRobots(users));\n  };\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => setRobots(users));\n  }, []);\n\n  const onSearchfield = e => {\n    setSearchfield(e.target.value);\n    setRobots(filteredRobots(searchfield));\n  };\n\n  const filteredRobots = sf => {\n    if (!robots) return {};\n    if (sf.length === 0) return robots;\n    return robots.filter(robot => robot.name.toLowerCase().includes(sf.toLowerCase()));\n  };\n\n  return !robots ? /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 22\n    }\n  }, \"Loading\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tc\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"f1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, \"[Robo]-Friends\"), /*#__PURE__*/React.createElement(SearchBox, {\n    searchChanged: onSearchfield,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardList, {\n    robots: robots,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Applications/robofriends-app/robofriends/src/App.js"],"names":["React","useState","useEffect","CardList","SearchBox","App","robots","setRobots","searchfield","setSearchfield","getRobots","fetch","then","response","json","users","onSearchfield","e","target","value","filteredRobots","sf","length","filter","robot","name","toLowerCase","includes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,WAAP;;AAGA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,EAApC;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMS,SAAS,GAAG,MAAM;AACtBC,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,KAAK,IAAIR,SAAS,CAACQ,KAAD,CAF1B;AAGD,GAJD;;AAMAb,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,KAAK,IAAIR,SAAS,CAACQ,KAAD,CAF1B;AAGD,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMC,aAAa,GAAGC,CAAC,IAAI;AACzBR,IAAAA,cAAc,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACAZ,IAAAA,SAAS,CAACa,cAAc,CAACZ,WAAD,CAAf,CAAT;AACD,GAHD;;AAKA,QAAMY,cAAc,GAAIC,EAAD,IAAQ;AAC7B,QAAI,CAACf,MAAL,EAAa,OAAO,EAAP;AACb,QAAIe,EAAE,CAACC,MAAH,KAAc,CAAlB,EAAqB,OAAOhB,MAAP;AACrB,WAAOA,MAAM,CAACiB,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCN,EAAE,CAACK,WAAH,EAAlC,CAAvB,CAAP;AACD,GAJD;;AAMA,SAAQ,CAACpB,MAAF,gBAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ,gBACL;AAAK,IAAA,SAAS,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE,oBAAC,SAAD;AAAW,IAAA,aAAa,EAAGU,aAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,QAAD;AAAU,IAAA,MAAM,EAAGV,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD,CAlCD;;AAoCA,eAAeD,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport CardList from './CardList';\nimport SearchBox from './SearchBox'\nimport './App.css';\n\n\nconst App = () => {\n  const [robots, setRobots] = useState();\n  const [searchfield, setSearchfield] = useState('');\n\n  const getRobots = () => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => setRobots(users));\n  }\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => setRobots(users));\n  }, []);\n\n  const onSearchfield = e => {\n    setSearchfield(e.target.value);\n    setRobots(filteredRobots(searchfield));\n  };\n\n  const filteredRobots = (sf) => {\n    if (!robots) return {};\n    if (sf.length === 0) return robots;\n    return robots.filter(robot => robot.name.toLowerCase().includes(sf.toLowerCase()));\n  };\n\n  return (!robots) ? <h1>Loading</h1> : (\n    <div className='tc'>\n      <h1 className='f1'>[Robo]-Friends</h1>\n      <SearchBox searchChanged={ onSearchfield }></SearchBox>\n      <CardList robots={ robots } />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}