{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","username","email","colors","className","length","src","alt","CardList","robots","map","robot","key","SearchBox","searchfield","searchChanged","type","onChange","placeholder","Scroll","props","style","overflowY","height","children","ErrorBoundary","state","hasError","this","Component","App","onSearchfield","e","setState","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOA6BeA,G,MAzBF,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC9BC,EAAS,CACX,eACA,gBACA,iBACA,gBACA,kBACA,kBACA,cACA,eACA,gBACA,gBAEF,OACE,yBAAKC,UAAS,aAASD,EAAOJ,EAAKI,EAAOE,QAA5B,uCACZ,yBAAKC,IAAG,+BAA0BP,EAA1B,YAAwCQ,IAAI,WACpD,6BACE,4BAAMP,GACN,2BAAKE,GACL,2BAAKD,OCFEO,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAElB,OACE,6BAEIA,EAAOC,KAAI,SAAAC,GAAK,OAAI,kBAAC,EAAD,CAClBC,IAAMD,EAAMZ,GACZA,GAAKY,EAAMZ,GACXC,KAAOW,EAAMX,KACbE,MAAQS,EAAMT,MACdD,SAAWU,EAAMV,gBCCZY,EAZG,SAAC,GAAmC,EAAjCC,YAAkC,IAArBC,EAAoB,EAApBA,cAChC,OACE,yBAAKX,UAAU,OACb,2BACEA,UAAU,mCACVY,KAAK,SACLC,SAAWF,EACXG,YAAY,oBCHLC,EALA,SAACC,GAEd,OAAQ,yBAAKC,MADK,CAAEC,UAAW,SAAUC,OAAQ,UACZH,EAAMI,WCe9BC,E,kDAfb,WAAYL,GAAQ,IAAD,8BACjB,cAAMA,IACDM,MAAQ,CACXC,UAAU,GAHK,E,qDAQjB,OACEC,KAAKF,MAAMC,SACX,yDAAqCC,KAAKR,MAAMI,a,GAZ1BK,aC+CbC,G,wDAtCb,aAAe,IAAD,8BACZ,gBAOFC,cAAgB,SAAAC,GACd,EAAKC,SAAS,CAAEnB,YAAakB,EAAEE,OAAOC,SAPtC,EAAKT,MAAQ,CACXjB,OAAQ,GACRK,YAAa,IAJH,E,gEAYO,IAAD,OAClBsB,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKP,SAAS,CAAExB,OAAQ+B,S,+BAGjC,IAAD,EACyBZ,KAAKF,MAA7BjB,EADD,EACCA,OAAQK,EADT,EACSA,YACV2B,EAAiBhC,EAAOiC,QAAO,SAAA/B,GACnC,OAAOA,EAAMX,KAAK2C,cAAcC,SAAS9B,EAAY6B,kBAEvD,OAASlC,EAAOJ,OACd,yBAAKD,UAAU,MACb,wBAAIA,UAAU,MAAd,kBACA,kBAAC,EAAD,CAAWW,cAAgBa,KAAKG,gBAChC,6BACA,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUtB,OAASgC,OAPD,2C,GAzBZZ,cCGEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAAkB,kBAAC,EAAD,OAA4BC,SAASC,eAAe,SD4HlE,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d28f4c1f.chunk.js","sourcesContent":["import React from 'react';\nimport 'tachyons';\n\n\nconst Card = ({ id, name, username, email }) => {\n  let colors = [\n    'bg-light-red',\n    'bg-light-blue',\n    'bg-light-green',\n    'bg-light-pink',\n    'bg-light-yellow',\n    'bg-light-purple',\n    'bg-dark-red',\n    'bg-dark-blue',\n    'bg-dark-green',\n    'bg-dark-pink'\n  ];\n  return (\n    <div className={`tc ${ colors[id % colors.length] } dib br3 pa3 ma2 grow bw2 shadow-5`}>\n      <img src={`https://robohash.org/${id}?500x500`} alt=\"robots\"/>\n      <div>\n        <h2>{ name }</h2>\n        <p>{ email }</p>\n        <p>{ username }</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ robots }) => {\n  // if (true) throw new Error('Noooooooo!');\n  return (\n    <div>\n      {\n        robots.map(robot => <Card\n          key={ robot.id }\n          id={ robot.id }\n          name={ robot.name }\n          email={ robot.email }\n          username={ robot.username }/>\n        )\n      }\n    </div>\n  );\n}\n\nexport default CardList;\n","import React from 'react';\n\n\nconst SearchBox = ({ searchfield, searchChanged }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type=\"search\"\n        onChange={ searchChanged }\n        placeholder='search robots' />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  let scrollStyle = { overflowY: 'scroll', height: '800px' };\n  return (<div style={ scrollStyle }>{ props.children }</div>);\n}\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  render() {\n    return (\n      this.state.hasError ?\n      <h1>ErrorBoundary Has occured</h1> : this.props.children\n    );\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: ''\n    };\n  }\n\n  onSearchfield = e => {\n    this.setState({ searchfield: e.target.value });\n  };\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }));\n  }\n\n  render() {\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n    return (!robots.length) ? <h1>Loading</h1> : (\n      <div className='tc'>\n        <h1 className='f1'>[Robo]-Friends</h1>\n        <SearchBox searchChanged={ this.onSearchfield }></SearchBox>\n        <hr/>\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={ filteredRobots } />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode><App /></React.StrictMode>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}